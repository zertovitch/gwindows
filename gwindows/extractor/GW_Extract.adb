--  GWindows Installer
--  (code first generated by GWenerator as a test application)

with GW_Install_Resource_GUI;           use GW_Install_Resource_GUI;

with Zip;                               use Zip;
with UnZip;                             use UnZip;

with GWin_Util;

with GWindows;                          use GWindows;
with GWindows.Application;
with GWindows.Base;
with GWindows.Buttons;                  use GWindows.Buttons;
with GWindows.Constants;                use GWindows.Constants;
with GWindows.Common_Dialogs;           use GWindows.Common_Dialogs;
with GWindows.GStrings;                 use GWindows.GStrings;
with GWindows.Static_Controls.Web;      use GWindows.Static_Controls.Web;
with GWindows.Message_Boxes;            use GWindows.Message_Boxes;
with GWindows.Windows;                  use GWindows.Windows;

with Ada.Command_Line;                  use Ada.Command_Line;
with Ada.Directories;                   use Ada.Directories;
with Ada.Environment_Variables;
with Ada.Exceptions;                    use Ada.Exceptions;
with Ada.Strings.Fixed;
with Ada.Strings.Unbounded;             use Ada.Strings.Unbounded;
with Ada.Text_IO;

with Set_Modification_Time_GNAT;  --  Missing in Ada.Directories...

procedure GW_Extract is

  procedure Configure_ResEdit (re_dir : String) is
    use Ada.Environment_Variables, Ada.Strings.Fixed, Ada.Text_IO;
    xml : constant String := re_dir & "\ResEdit.xml";
    bak : constant String := re_dir & "\ResEdit.bak.xml";
    path : constant String := Value ("PATH");
    start : Integer := path'First;
    sep, stop : Natural;
    f : File_Type;
    procedure Try (incl : String) is
    begin
      if Ada.Directories.Exists (incl & "windows.h") then
        Put_Line (f, "      <include path=""" & incl & """ />");
      end if;
    end Try;
  begin
    if Ada.Directories.Exists (xml) then
      Copy_File (xml, bak);
    end if;
    Create (f, Out_File, xml);
    Put_Line (f, "<!-- ResEdit configuration file, with some presets for GWenerator -->");
    Put_Line (f, "<config>");
    Put_Line (f, "  <wizard value=""false"" />");
    Put_Line (f, "  <createProjectFolder value=""false"" />");
    Put_Line (f, "  <autoCheckUpdate value=""false"" />");
    Put_Line (f, "  <headerName>%barefilename%.h</headerName>");
    Put_Line (f, "  <includes>");
    while start <= path'Last loop
      sep := Index (path (start .. path'Last), ";");
      if sep = 0 then
        stop := path'Last;
      else
        stop := sep - 1;
      end if;
      --  Remove the "bin" with - 3
      Try (path (start .. stop - 3) & "i686-pc-mingw32\include\");
      Try (path (start .. stop - 3) & "x86_64-w64-mingw32\include\");
      start := stop + 2;
    end loop;
    Put_Line (f, "  </includes>");
    Put_Line (f, "</config>");
    Close (f);
  end Configure_ResEdit;

  function S (Source : Unbounded_String) return String
    renames Ada.Strings.Unbounded.To_String;
  function U (Source : String) return Unbounded_String
    renames Ada.Strings.Unbounded.To_Unbounded_String;

  function S2G (Value : String) return GString renames To_GString_From_String;
  function G2S (Value : GString) return String renames To_String;
  --  function GU2G (Value : GString_Unbounded) return GString renames To_GString_From_Unbounded;
  --  function G2GU (Value : GString) return GString_Unbounded renames To_GString_Unbounded;

  NL : constant GString := S2G (ASCII.CR & ASCII.LF);

  Install_dir : Unbounded_String := To_Unbounded_String ("");
  mem_cur_dir : constant String := Current_Directory & '\';

  type Character_mode is (ANSI, UNICODE);
  Mode : Character_mode := UNICODE;  --  Default is Unicode
  Proceed, OK : Boolean;
  With_GWenerator : Boolean := True;
  No_Parent : Window_Type;

  procedure Main_install_dialog (Success : out Boolean) is
    Main_Dlg  : GW_Install_Resource_GUI.Main_install_dialog_Type;
    Result    : Integer;

    procedure Select_directory (Parent : in out GWindows.Base.Base_Window_Type'Class) is
    begin
       Main_Dlg.Directory_edit.Text (
         Get_Directory (Parent,
         "Choose a target directory. GWindows, GNATCOM and " & NL &
         "GWenerator sub-folders will be created in that directory."
         )
       );
    end Select_directory;

    procedure Get_Data (dummy : in out GWindows.Base.Base_Window_Type'Class) is
    begin
      Install_dir := U (G2S (Main_Dlg.Directory_edit.Text));
      if Main_Dlg.ANSI_choice.State = Checked then
        Mode := ANSI;
      else
        Mode := UNICODE;
      end if;
       With_GWenerator := Main_Dlg.GWen_check.State = Checked;
    end Get_Data;

  begin  --  Main_install_dialog
    Create_Full_Dialog (Main_Dlg, No_Parent);
    Main_Dlg.Center;
    Main_Dlg.Small_Icon ("AAA_Main_Icon");
    Main_Dlg.Large_Icon ("AAA_Main_Icon");
    Main_Dlg.Directory_select_button.Hide;
    Main_Dlg.Directory_select_button_permanent.Show;
    Main_Dlg.GNATCOM_check.State (Checked);
    if With_GWenerator then
      Main_Dlg.GWen_check.State (Checked);
    end if;
    case Mode is
      when ANSI =>
        Main_Dlg.ANSI_choice.State (Checked);
      when UNICODE =>
        Main_Dlg.UNICODE_choice.State (Checked);
    end case;
    Main_Dlg.Text (Main_Dlg.Text & S2G (Version_info.FileVersion));
    Main_Dlg.Setup_title.Text (Main_Dlg.Setup_title.Text & S2G (Version_info.FileVersion));
    Main_Dlg.Directory_edit.Text (S2G (S (Install_dir)));
    if Install_dir = "" then
      Main_Dlg.Directory_edit.Focus;
    end if;
    On_Destroy_Handler (Main_Dlg, Get_Data'Unrestricted_Access);
    On_Click_Handler (
      Main_Dlg.Directory_select_button_permanent,
      Select_directory'Unrestricted_Access
    );
    Result := GWindows.Application.Show_Dialog (Main_Dlg);
    Success := Result = IDOK;
  end Main_install_dialog;

  procedure Self_extract (Success : out Boolean) is
    zi : Zip_info;
    n : Natural := 0;
    pct_old : Natural := 0;
    No_Parent : Window_Type;
    Unpack_Dlg : GW_Install_Resource_GUI.Unpack_dialog_Type;
    --
    procedure Tell_data
               (name               : String;
                compressed_bytes   : Zip.File_size_type;
                uncompressed_bytes : Zip.File_size_type;
                method             : Zip.PKZip_method)
    is
    pragma Unreferenced (compressed_bytes, uncompressed_bytes, method);
      pct : Natural;
    begin
      n := n + 1;
      pct := (100 * n) / Entries (zi);
      if pct /= pct_old then
        GWindows.Application.Message_Check;
      end if;
      pct_old := pct;
      Unpack_Dlg.Unpack_progress.Position (pct);
      Unpack_Dlg.File_name.Text (S2G (name));
    end Tell_data;
    --
    My_FS_routines : constant UnZip.FS_routines_type :=
       (Create_Path         => Ada.Directories.Create_Path'Access,  --  Ada 2005
        Set_Time_Stamp      => Set_Modification_Time_GNAT'Access,
        Compose_File_Name   => null,
        others              => null
      );
    --
    procedure Extract_1_file (name : String) is
      gwen_dir : constant String := "gwenerator";
    begin
      if With_GWenerator or
        (name'Length < gwen_dir'Length or else
         name (name'First .. name'First + gwen_dir'Length - 1) /= gwen_dir)
      then
        Extract (
          zi, name, null, null, Tell_data'Unrestricted_Access, null,
          file_system_routines => My_FS_routines
        );
      end if;
    end Extract_1_file;
    --
    procedure Extract_all_files is new Zip.Traverse (Extract_1_file);
    --
  begin
    Success := False;
    Set_Directory (To_String (Install_dir));
    Create_Full_Dialog (Unpack_Dlg, No_Parent);
    Small_Icon (Unpack_Dlg, "AAA_Main_Icon");
    Large_Icon (Unpack_Dlg, "AAA_Main_Icon");
    Unpack_Dlg.Center;
    Unpack_Dlg.Show;
    Unpack_Dlg.Redraw (Redraw_Now => True);  --  otherwise icons don't show up!
    begin
      Load (zi, Command_Name);
      Extract_all_files (zi);
    exception
      when E : others =>
        Message_Box (
          "GWindows installation error",
          "Archive extraction failed - maybe a broken download ?" & NL &
          "Archive = " & S2G (Command_Name) & NL &
          S2G (Exception_Name (E)) & NL & S2G (Exception_Message (E)),
          Icon => Error_Icon
        );
        Set_Directory (mem_cur_dir);
        return;
    end;
    Set_Directory (mem_cur_dir);
    Success := True;
  end Self_extract;

  procedure Copy_encoding_dependent (base : String) is
    img  : constant String := Character_mode'Image (Mode);
    pfx1 : constant String := base & "coding\gwindows";
    pfx2 : constant String := base & "gwindows";
  begin
    Copy_File (
      pfx1 & "_" & img & ".ads",
      pfx2 & ".ads"
    );
    Copy_File (
      pfx1 & "-gstrings_" & img & ".adb",
      pfx2 & "-gstrings.adb"
    );
    Copy_File (
      pfx1 & "-gstrings-handling_" & img & ".ads",
      pfx2 & "-gstrings-handling.ads"
    );
    Copy_File (
      pfx1 & "-gstrings-maps_" & img & ".ads",
      pfx2 & "-gstrings-maps.ads"
    );
    Copy_File (
      pfx1 & "-gstrings-maps_constants_" & img & ".ads",
      pfx2 & "-gstrings-maps_constants.ads"
    );
    Copy_File (
      pfx1 & "-gstrings-unbounded_" & img & ".ads",
      pfx2 & "-gstrings-unbounded.ads"
    );
  end Copy_encoding_dependent;

  Result : Message_Box_Result;

  procedure Quit is
    Ciao : Goodbye_dialog_Type;
    Ciao_2 : Goodbye_dialog_2_Type;
    GNAT, GNAVI, GNAVI_SF, GNAVI_Dis, MinGW, ResEdit : URL_Type;
    procedure Get_Data (dummy : in out GWindows.Base.Base_Window_Type'Class) is
      id : constant String := To_String (Install_dir);
      gwen_dir : constant String := id & "\gwenerator";
    begin
      if Ciao_2.Open_folder.State = Checked then
        GWin_Util.Start (id & "\gwindows");
      end if;
      if Ciao_2.Open_user_guide.State = Checked then
        GWin_Util.Start (id & "\gwindows\docs\User_Guide.html");
      end if;
      if Ciao_2.Open_gnatcom_folder.State = Checked then
        GWin_Util.Start (id & "\gnatcom");
      end if;
      if Ciao_2.Build_gnatcom.State = Checked then
        Set_Directory (id & "\gnatcom");
        GWin_Util.Start (id & "\gnatcom\build_tools.cmd", As_Minimized => True);
        Set_Directory (mem_cur_dir);
      end if;
      if With_GWenerator then
        Configure_ResEdit (gwen_dir);
        if Ciao_2.Build_gwenerator.State = Checked then
          Set_Directory (gwen_dir);
          GWin_Util.Start (gwen_dir & "\build.cmd", "-res", As_Minimized => True);
          Set_Directory (mem_cur_dir);
        end if;
        if Ciao_2.Open_gwenerator_folder.State = Checked then
          GWin_Util.Start (gwen_dir);
        end if;
        if Ciao_2.Open_gwenerator_doc.State = Checked then
          GWin_Util.Start (gwen_dir & "\gwenerator_info.html");
        end if;
      end if;
    end Get_Data;
  begin
    Create_Full_Dialog (Ciao, No_Parent);
    Ciao.Center;
    Ciao.Small_Icon ("AAA_Main_Icon");
    Ciao.Large_Icon ("AAA_Main_Icon");
    Create_and_Swap (GNAT, Ciao.GNAT_URL, Ciao, "http://libre.adacore.com/");
    Create_and_Swap (MinGW, Ciao.MinGW_URL, Ciao, "http://mingw.org/");
    Create_and_Swap (GNAVI, Ciao.GNAVI_URL, Ciao, "http://www.gnavi.org/");
    Create_and_Swap (GNAVI_SF, Ciao.GNAVI_SF_URL, Ciao, "http://www.sourceforge.net/projects/gnavi/");
    Create_and_Swap (GNAVI_Dis, Ciao.GNAVI_Discuss_URL, Ciao, "http://lists.sourceforge.net/lists/listinfo/gnavi-discuss");
    Create_and_Swap (ResEdit, Ciao.ResEdit_URL, Ciao, "http://www.resedit.net/");
    GWindows.Application.Show_Dialog (Ciao);
    --
    Create_Full_Dialog (Ciao_2, No_Parent);
    Ciao_2.Center;
    Ciao_2.Small_Icon ("AAA_Main_Icon");
    Ciao_2.Large_Icon ("AAA_Main_Icon");
    Ciao_2.Open_folder.State (Checked);
    Ciao_2.Open_gnatcom_folder.State (Checked);
    Ciao_2.Build_gnatcom.State (Checked);
    Ciao_2.Open_user_guide.State (Checked);
    if With_GWenerator then
      Ciao_2.Build_gwenerator.State (Checked);
      Ciao_2.Open_gwenerator_folder.State (Checked);
      Ciao_2.Open_gwenerator_doc.State (Checked);
    else
      Ciao_2.Build_gwenerator.Disable;
      Ciao_2.Open_gwenerator_folder.Disable;
      Ciao_2.Open_gwenerator_doc.Disable;
    end if;
    On_Destroy_Handler (Ciao_2, Get_Data'Unrestricted_Access);
    GWindows.Application.Show_Dialog (Ciao_2);
  end Quit;

begin
  if Argument_Count > 0 then
    --  Install_dir
    --  /a = ANSI
    --  /u = UNICODE
    --  /c = command line, no GUI, no question: can be used in a batch file
    --
    null;  --  !!
  end if;
  loop
    Main_install_dialog (OK);
    exit when not OK;
    Proceed := True;
    --  We check: 1) existing version; 2) valid directory
    if Ada.Directories.Exists (To_String (Install_dir) &
       "\gwindows\framework\gwindows.ads")
    then
      --  Conflict
      --  !! to do: nicer box with side-by-side comparison and dates
      Result :=
        Message_Box (
          "GWindows installation - possible version conflict",
          "A version of GWindows is already installed there." & NL &
          "Do you want to replace it ?",
          Yes_No_Box,
          Question_Icon
        );
      if Result = No then
        Proceed := False;
      end if;
    end if;
    if Proceed then
      begin
        Create_Path (To_String (Install_dir));
      exception
        when Name_Error =>
          Proceed := False;
          if Install_dir = "" then
            Message_Box (
              "Invalid directory for GWindows installation",
              "Directory for installation is not specified",
              Icon => Error_Icon
            );
          else
            Message_Box (
              "Invalid directory for GWindows installation",
              "Directory """ & S2G (S (Install_dir)) & """ cannot be created",
              Icon => Error_Icon
            );
          end if;
      end;
      if Proceed then
        Self_extract (OK);
        if not OK then
          exit;
        end if;
        Copy_encoding_dependent (To_String (Install_dir) & "\gwindows\framework\");
        Quit;
        exit;
      end if;
    end if;
  end loop;
end GW_Extract;
